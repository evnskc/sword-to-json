name: CD

on:
  workflow_dispatch:

concurrency:
  group: CD
  cancel-in-progress: true

jobs:
  staging:
    name: Deploy to Staging
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: Set up repository
        uses: actions/checkout@v3

      - name: Set up python
        uses: actions/setup-python@v3
        with:
          python-version: 3.10.x

      - name: Set up poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -
          poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v3
        with:
          path: ./**/.venv
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Build
        run: poetry build

      - name: Publish to TestPyPI
        env:
          POETRY_PYPI_TOKEN_TEST_PYPI: ${{ secrets.TESTPYPI_API_TOKEN }}
          POETRY_REPOSITORIES_TEST_PYPI_URL: https://test.pypi.org/legacy/
        run: poetry publish --repository test-pypi

  production:
    name: Deploy to Production
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Set up repository
        uses: actions/checkout@v3

      - name: Set up python
        uses: actions/setup-python@v3
        with:
          python-version: 3.10.x

      - name: Set up poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -
          poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v3
        with:
          path: ./**/.venv
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Build
        run: poetry build

      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: poetry publish